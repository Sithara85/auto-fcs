<style>
.esmall-table table {
  border-width: 1px;
  border-spacing: 2px;
  border-style: dotted;
  border-color: gray;
  border-collapse: collapse;
  font-size: 0.4em;
}

.esmall-table table tr { line-height: 18px; }


.esmall-table table th {
  border-width: 1px;
  padding-left: 2px;
  padding-right: 2px;
  font-weight: bold;
  border-style: dotted;
  border-color: gray;
}

.esmall-table table td {
  border-width: 1px;
  padding-left: 2px;
  padding-right: 2px;
  border-style: dotted;
  border-color: gray;
}
.small-code pre code {
  font-size: .5em;
}

.small-p p{
  font-size: 8;
}

.small {  
    font-size: 8;
}


</style>

Auto gating update
========================================================
author: 
date: 
autosize: true

April 11th, 2017



```{r setup,include=FALSE}
require(ggplot2)
require(irr) 
# http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/
theme_set(theme_bw(20))

require(knitcitations)
cite_options(citation_format = "text", max.names = 3, 
             cite.style = "authoryear", style = "markdown", 
             hyperlink = "to.doc")
options(digits=4)
map = read.delim("/Users/Kitty/git/auto-fcs/explore/openCyto/autoManMap.txt",stringsAsFactors = FALSE,sep = "\t") 
metrics =read.delim("/Volumes/Beta/data/flow/testTypesTestMetrics5.txt",stringsAsFactors = FALSE,sep = "\t") 
metrics$freqParent = metrics$Count/metrics$ParentCount
metrics$nameOrig = metrics$name
metrics$name =gsub(".fcs.*","",metrics$name ,fixed = FALSE)
metrics$name =gsub(" ","",metrics$name ,fixed = TRUE)

metricsMan = metrics[which(metrics$GATE=="MANUAL"&metrics$Population %in% map$Manual&metrics$METRIC=="count"),]
metricsAuto = metrics[which(metrics$GATE=="AUTOMATIC"&metrics$QC=="FALSE"&(metrics$Population %in% map$Auto|metrics$Parent=="root")&metrics$METRIC=="count"),]

metricsMan = merge(metricsMan,map,by.x = "Population",by.y = "Manual")
metricsMan$Population =metricsMan$Auto
metricsMan$Merge=paste(metricsMan$Population,metricsMan$name,sep = "_")
metricsAuto = merge(metricsAuto,map,by.x = "Population",by.y = "Auto",all.x = TRUE)
metricsAuto$Merge=paste(metricsAuto$Population,metricsAuto$name,sep = "_")

row.names(metricsAuto) =metricsAuto$Merge

for(pop in unique(map$Auto)) {
  for (sample in unique(metricsAuto$name)) {
    row = paste(pop, sample, sep = "_")
    sub = metricsAuto[which(metricsAuto$Population == pop &
                              metricsAuto$name == sample),]
    realParentCount = metricsAuto[which(metricsAuto$Population == sub$RealAutoParent &
                                          metricsAuto$name == sample),]$Count
    if (sub$RealAutoParent != "root") {
      metricsAuto[row, "freqParent"] = sub$Count / realParentCount
    }else{
      realParentCount = metricsAuto[which(metricsAuto$Parent == sub$RealAutoParent &
                                          metricsAuto$name == sample),]$ParentCount
      metricsAuto[row, "freqParent"] = sub$Count / realParentCount

    }
  }
}
metricCombo = merge(metricsAuto,metricsMan,by.x = "Merge",by.y = "Merge")
metricCombo$Population.x= gsub("CCR7","CD4/CCR7",metricCombo$Population.x)


getSummary <- function(metricCombo, data1, data2) {
  ts = cor.test(data1, data2, method = "spearman")
  fit = lm(data2 ~ data1, data = metricCombo)
  sum = summary(fit)
  w = wilcox.test(data1,data2,paired=TRUE)
  d = data.frame(X1=data1,X2 =data2)
  icc =icc(d, model="oneway", type="agreement")
  summary = data.frame(
  N_SAMPS = length(unique(metricCombo$name.x)),
  N_DATA = length(metricCombo$Count.x),
  RHO = ts$estimate[[1]],
  BETA = sum$coefficients[2],
  BETA_SE= sum$coefficients[4],
  R2 = sum$r.squared,
  ICC_1 = icc$value
  )
}
```
OpenCyto
========================================================
`r citet("10.1371/journal.pcbi.1003806") `
- Mimics manual gating by focusing on 2 channels at a time
  - can follow traditional gate hierarchy
  - e.g. gate lymph, then single, then live, etc
- Pipeline templates defined in .csv file
  - defines algorithmic approach for each gate to be applied across many samples
  - not "just push go", takes some setup for a decent template
- Results are interpretable and labelled populations 
  - not geared toward detecting novel cell types

OpenCyto
========================================================

> The two top performing gating algorithms - OpenCyto (v. 1.7.4), flowDensity (v. 1.4.0) - in a study run by the FlowCAP consortium aimed at selecting the best performing algorithms for this larger study were chosen for the analysis presented in this paper. ***Standardizing Flow Cytometry Immunophenotyping Analysis from the Human ImmunoPhenotyping Consortium*** `r citet("10.1038/srep20686") `

- Stole template from above as a start
  - our panel 1 template currently lives [here](https://github.com/PankratzLab/auto-fcs/blob/master/explore/openCyto/lymph.dev.b.csv)
  
Current progres overview 
========================================================
class: esmall-table

```{r,echo=FALSE}

p = ggplot(metricCombo,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = metricCombo,data1 = metricCombo$Count.x,data2 = metricCombo$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(metricCombo,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = metricCombo,data1 = metricCombo$freqParent.x,data2 = metricCombo$freqParent.y))
```

Lymphocytes (SSC-A v FSC-A)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "lymph"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

Single Cells (FSC-H v FSC-W)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "Singlets"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```


Live cells (PE-)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "PE-A"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```


Tcells (CD3+ CD19-)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "CD3+"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

Helper Tcells-CD4+
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "CD4"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

central memory helper Tcells (CCR7+ CD45RA-)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "CD4/CCR7+CD45RA-"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

effector helper Tcells (CCR7- CD45RA+)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "CD4/CCR7-CD45RA+"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

effector memory helper Tcells (CCR7- CD45RA-)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "CD4/CCR7-CD45RA-"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

naive helper Tcells (CCR7+ CD45RA+)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "CD4/CCR7+CD45RA+"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```


cytotoxic Tcells-CD8+
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "CD8"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```


B cells (CD3- CD19+) 
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "CD19gate"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

naive Bcells (CD27- IgD+)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "IgD+CD27-"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

IgD- memory Bcells (CD27+)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "IgD-CD27+"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```

IgD+ memory Bcells (CD27+)
========================================================
class: esmall-table

```{r,echo=FALSE}
gate = "IgD+CD27+"
data = metricCombo[which(metricCombo$Population.x==gate),]

p = ggplot(data,aes(x=Count.x,y=Count.y, color=Population.x)) +geom_point()+xlab("Autogating count")+ylab("Manual gating count")+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$Count.x,data2 = data$Count.y))
```
***
```{r,echo=FALSE}
p = ggplot(data,aes(x=freqParent.x,y=freqParent.y, color=Population.x)) +geom_point()+xlab("Autogating proportion of parent")+ylab("Manual gating proportion of parent") +xlim(0,1)+ylim(0,1)+geom_abline(intercept = 0, slope = 1) 
p 
```

```{r,echo=FALSE}
kable(getSummary(metricCombo = data,data1 = data$freqParent.x,data2 = data$freqParent.y))
```


Summary
========================================================

- OpenCyto seems to work
- Lots of room for improvement
- Iterative process

ICC
========================================================

From [Wikipedia](https://en.wikipedia.org/wiki/Intraclass_correlation)

`r citet("10.1037/1040-3590.6.4.284")` gives the following often quoted guidelines for interpretation for kappa or ICC inter-rater agreement measures:

- Less than 0.40—poor.
- Between 0.40 and 0.59—Fair.
- Between 0.60 and 0.74—Good.
- Between 0.75 and 1.00—Excellent.

